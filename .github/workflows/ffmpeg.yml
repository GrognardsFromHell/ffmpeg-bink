name: ffmpeg

on: 
  push:

env:
  FFMPEG_TAG: n4.3.1

defaults:
  run:
    shell: bash

jobs:
  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        arch: [x64, arm64]
        include:
          - arch: x64
            platform: x64
            compiler_arch: x64
          - arch: arm64
            platform: ARM64
            compiler_arch: arm64
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: recursive
          lfs: true
      - name: Checkout FFmpeg
        run: git clone https://github.com/FFmpeg/FFmpeg --branch ${FFMPEG_TAG} --depth 1
      - name: Install MSYS2
        run: choco install msys2 --no-progress --params "/NoUpdate"
      - name: Build FFmpeg
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=$COMPILER_ARCH -host_arch=amd64
          set MSYS2_PATH_TYPE=inherit
          C:\tools\msys64\usr\bin\bash -lc "./build.sh"
        shell: cmd
        env:
          HOME: ${{ runner.workspace }}
          ARCH: ${{ matrix.arch }}
          COMPILER_ARCH: ${{ matrix.compiler_arch }}
      - name: Build
        run: |
          cmake -B build -A $PLATFORM -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install .
          # Ignore the exit-code of this command since building ffmpeg-bink is a shitshow due to ffmpeg and LTCG
          cmake --build build --config Release --target ffmpeg-bink || true
          cmake --build build --config Release -t install
        shell: bash
        env:
          PLATFORM: ${{ matrix.platform }}
      - uses: actions/upload-artifact@v2
        with:
          name: native_lib_windows_${{ matrix.arch }}
          path: install

  release:
    needs: build-windows
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v2
        with:
          name: ffmpeg
          path: ffmpeg-bink
      - name: Archive
        run: tar -cJf ffmpeg-win32-static.tar.xz ffmpeg-bink/
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ffmpeg/build/${{ github.run_number }}
          release_name: ffmpeg-bink build ${{ github.run_number }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./ffmpeg-win32-static.tar.xz
          asset_name: ffmpeg-win32-static.tar.xz
          asset_content_type: application/x-gtar
